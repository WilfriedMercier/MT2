!Mercier Wilfried
!09/01/2019
!Equation de burger - V4
!Essaie de paralleliser la boucle spatiale dans la boucle temporelle

PROGRAM Burger
   USE MPI
   IMPLICIT NONE
   
   !...Declaration...
      !...Variables...
      REAL(KIND=8)                              :: stept                !Pas selon t
      REAL(KIND=8)                              :: stepx                !Pas selon x
      REAL(KIND=8)                              :: fder                 !Derivee premiere de v /x
      REAL(KIND=8)                              :: sder                 !Derivee seconde de v /x
      INTEGER                                   :: x, t                 !Temps et espace
      INTEGER                                   :: NSTEPT               !Nombre de pas selon t
      INTEGER                                   :: NSSTEPX              !Nombre de pas dans les sous-tableaux 
      INTEGER                                   :: NSSSTEPX             !Nombre de pas dans les sous-tableaux
      INTEGER                                   :: NTEMPS               !NSSTEPX+1
      INTEGER                                   :: start, endin         !Controles la boucle
      CHARACTER(LEN=30)                         :: filename
      !...MPI...
      REAL(KIND=8)                              :: temp
      INTEGER                                   :: err, proc, nbprocs   
      INTEGER                                   :: maxproc, tag, requete   
      INTEGER, DIMENSION(MPI_STATUS_SIZE)       :: statut
      !...Parametres...
      REAL(KIND=8), PARAMETER                   :: PI = 4.0*atan(1.0_8) !PI
      REAL(KIND=8), PARAMETER                   :: RE = 150.0_8         !Nb de Reynolds
      REAL(KIND=8), PARAMETER                   :: x0 = 0.0_8           !Premier bord
      REAL(KIND=8), PARAMETER                   :: x1 = 1.0_8           !Second bord
      REAL(KIND=8), PARAMETER                   :: TotTime = 1.0_8      !Temps total
      INTEGER,      PARAMETER                   :: NSTEPX = 1000        !Nombre de pas selon x
      !...Tableaux...
      REAL(KIND=8), DIMENSION(:), ALLOCATABLE   :: tab_x                !Tableau des positions
      REAL(KIND=8), DIMENSION(:), ALLOCATABLE   :: tab_v                !Tableau des vitesses
      REAL(KIND=8), DIMENSION(:), ALLOCATABLE   :: tab_temp             !Tableau temporaire
      !...Fonctions...
      REAL(KIND=8)                              :: OneDeriv             !Derivee premiere
      REAL(KIND=8)                              :: TwoDeriv             !Derivee seconde
   !----------------------------------------------------------------------------------------------------------------------

   !Debut MPI
   CALL MPI_INIT(err)
   
   !Recuperation nombre de processus et numero processus
   CALL MPI_COMM_SIZE(MPI_COMM_WORLD, nbprocs, err)
   CALL MPI_COMM_RANK(MPI_COMM_WORLD, proc, err)

   !Initialisation pas de temps et espace
   stepx       =  (X1-X0)/(NSTEPX-1)
   stept       =  stepx*stepx
   maxproc     =  INT(nbprocs-1)
   NSTEPT      =  INT(TotTime/stept)
   NSSTEPX     =  INT(NSTEPX/nbprocs)
   NSSSTEPX    =  INT(NSSTEPX+2)
   NSTEMP      =  INT(NSSTEPX+1)
   WRITE(filename, '(A8,I2.2)')"data/MPI", proc
   
   !Allocation tableaux vitesse
   ALLOCATE(tab_v(NSSSTEPX))
   ALLOCATE(tab_temp(NSSSTEPX))
   ALLOCATE(tab_x(NSSSTEPX))
   
   !Initialisation des positions
   IF (proc .eq. 0) THEN
      start                =  2
      endin                =  2
      tab_v(1)             =  0.0_8
      tab_temp(1)          =  0.0_8
   ELSE IF (proc .eq. maxproc) THEN
      start                =  1
      endin                =  1
      tab_v(NSSSTEPX)      =  0.0_8
      tab_temp(NSSSTEPX)   =  0.0_8      
   ELSE
      start                =  1
      endin                =  2
   ENDIF
      
   DO x=start, NSSTEPX+endin
      tab_x(x)  = x0 + ( proc*NSSTEPX + x-2)*stepx
   END DO

   !Initialisation des vitesses      
   DO x=1, NSSTEPX+2
      tab_v(x)    = SIN(2.0_8*PI*tab_x(x))
      tab_temp(x) = tab_v(x)
   END DO

   !Ecriture conditions initiales
   OPEN(UNIT=proc, FILE=filename, STATUS='REPLACE')
   CALL Write2TabPlusToFile(tab_x, tab_v, 0, NSSSTEPX, 11)
   
   !Calcul de l'evolution temporelle
   DO t=1, NSTEPT
      IF ( MOD(t, 2) .ne. 0 ) THEN
         isOdd =  .TRUE.
      ELSE
         isOdd =  .FALSE.
      ENDIF  
   
      DO x=2, NSSTEPX+1
         !Calcul premiere et seconde derivees
         IF (isOdd) THEN
            fder     = OneDeriv(tab_temp(x+1), tab_temp(x), stepx, 1)
            sder     = TwoDeriv(tab_temp(x+1), tab_temp(x-1), tab_temp(x), stepx)
            tab_v(x) = stept*(sder/RE - tab_temp(x)*fder) + tab_temp(x)
         ELSE
            fder        = OneDeriv(tab_v(x+1), tab_v(x), stepx, 1)
            sder        = TwoDeriv(tab_v(x+1), tab_v(x-1), tab_v(x), stepx)     
            tab_temp(x) = stept*(sder/RE - tab_v(x)*fder) + tab_v(x)                                       
         ENDIF
      END DO
      
      !Transfert tampons
      IF (isOdd) THEN
         temp = 
         
         
         !Envoie du membre le plus a droite
         IF (proc .lt. maxproc) THEN
            CALL MPI_ISEND(tab_v(4), 1, MPI_REAL, proc+1, proc, MPI_COMM_WORLD, requete, err)
            CALL
         ENDIF
         
         !Reception du membre le plus a gauche
         IF (proc .gt. 0) THEN
            CALL MPI_IRECV(tab_v(1), 1, MPI_REAL, proc-1, tag, MPI_COMM_WORLD, statut, requete, err)
         ENDIF       
         
         !Envoie du membre le plus a gauche
         IF (proc .gt. maxproc) THEN
            CALL MPI_ISEND(tab_v(4), 1, MPI_REAL, proc+1, proc, MPI_COMM_WORLD, requete, err)
         ENDIF
         
         !Reception du membre le plus a droite
         IF (proc .lt. maxproc) THEN
            CALL MPI_IRECV(tab_v(1), 1, MPI_REAL, proc-1, tag, MPI_COMM_WORLD, statut, requete, err)
         ENDIF        
         
         
      
      !Ecrit dans fichier
      IF ( MOD(t, INT(NSTEPT/10)) .eq. 0 ) THEN
         IF ( MOD(t, 2) .ne. 0 ) THEN
            CALL Write2TabPlusToFile(tab_x, tab_v, t, NSSSTEPX, 11)
         ELSE
            CALL Write2TabPlusToFile(tab_x, tab_temp, t, NSSSTEPX, 11)
         ENDIF
      ENDIF
   END DO
  CLOSE(proc)

   !Desallocation tableaux
   DEALLOCATE(tab_v)
   DEALLOCATE(tab_temp)
   DEALLOCATE(tab_x)
   
   CALL MPI_FINALIZE(err)

END PROGRAM Burger


!---------------------------------------------------------------------------------------------------------------------
!>Derivee premiere non-centree/centree
REAL(KIND=8) FUNCTION OneDeriv(valSup, val, step, isCenteredFlag)
   IMPLICIT NONE

   !...non locales...
   REAL(KIND=8), INTENT(IN) :: valSup           !Valeur a i+1
   REAL(KIND=8), INTENT(IN) :: val              !Valeur a i
   REAL(KIND=8), INTENT(IN) :: step             !Pas
   INTEGER,      INTENT(IN) :: isCenteredFlag   !0 si non centre, 1 si centre

   OneDeriv = (valSup-val)/step
!   IF (OneDeriv .gt. HUGE(OneDeriv) ) THEN
!      WRITE(*,*)valSup, val, step
!   ENDIF
   
   IF (isCenteredFlag .EQ. 1) THEN
      OneDeriv = OneDeriv/2.0_8
   ENDIF
   
END FUNCTION OneDeriv


!---------------------------------------------------------------------------------------------------------------------
!>Derivee premiere ordre deux
REAL(KIND=8) FUNCTION OneDerivSecondOrder(valSupSup, valSup, val, step)
   IMPLICIT NONE

   !...non locales...
   REAL(KIND=8), INTENT(IN) :: valSupSup  !Valeur a i+2
   REAL(KIND=8), INTENT(IN) :: valSup     !Valeur a i+1
   REAL(KIND=8), INTENT(IN) :: val        !Valeur a i
   REAL(KIND=8), INTENT(IN) :: step       !Pas

   OneDerivSecondOrder = (4.0_8*valSup - valSupSup - 3.0_8*val)/(2.0_8*step)

END FUNCTION OneDerivSecondOrder


!---------------------------------------------------------------------------------------------------------------------
!>Derivee seconde
REAL(KIND=8) FUNCTION TwoDeriv(valSup, valMin, val, step)
   IMPLICIT NONE

   !...non locales...
   REAL(KIND=8), INTENT(IN) :: valSup  !Valeur a i+1
   REAL(KIND=8), INTENT(IN) :: valMin  !Valeur a i-1
   REAL(KIND=8), INTENT(IN) :: val     !Valeur a i
   REAL(KIND=8), INTENT(IN) :: step    !Pas

   TwoDeriv = REAL( (valSup+valMin-2.0_8*val)/(step*step)  )

END FUNCTION TwoDeriv


!----------------------------------------------------------------------------------------------------------------------
!>Ecrit dans un fichier deux tableaux 1D
SUBROUTINE Write2TabToFile(tab1, tab2, length, fname)
   IMPLICIT NONE

   !...Declaration...
      !...non locales...
      INTEGER,                    INTENT(IN) :: length   !Taille tableau
      REAL(KIND=8), DIMENSION(*), INTENT(IN) :: tab1     !Tableau
      REAL(KIND=8), DIMENSION(*), INTENT(IN) :: tab2     !Tableau
      CHARACTER(LEN=*),           INTENT(IN) :: fname
      !...Variables locales...
      INTEGER                                :: i
      
   !Ouverture fichier
   OPEN(UNIT=10, FILE=fname, STATUS='REPLACE')

   !Ecriture fichier
   DO i=1, length
      WRITE(10, '(F13.7, 4X, F13.7)')tab1(i), tab2(i)
   END DO

   !Fermeture fichier
   CLOSE(10)

END SUBROUTINE Write2TabToFile


!--------------------------------------------------------------------------------------------------------$
!>Ecrit dans un fichier deux tableaux 1D
SUBROUTINE Write2TabPlusToFile(tab1, tab2, time, length, unitOut)
   IMPLICIT NONE

   !...Declaration...
   !...non locales...
   INTEGER,                    INTENT(IN) :: length, unitOut, time   !Taille tableau et unite sortie
   REAL(KIND=8), DIMENSION(*), INTENT(IN) :: tab1, tab2              !Tableaux
   !...Variables locales...
   INTEGER                                :: i

   !Ecriture fichier
   DO i=1, length
      WRITE(unitOut, '(I15, 4X, F13.7, 4X, F13.7)')time, tab1(i), tab2(i)
   END DO

END SUBROUTINE Write2TabPlusToFile
